##Added stability loss for ruler change back to tribes as bloodlines setup events for 2 tribes change ruler. Further ruler change caused by appointing regent is prevented from causing stability loss.

on_ruler_change = {
	effect = {
	
		###Tribal Ruler change
		
		if = {
			limit = {
				is_tribal = yes
				current_date > 451.1.1
			}
			add_stability = -10
		}
	
		###Vanilla
		if = {
			limit = {
				tag = MRY
				current_ruler = {
					NOR = {
						this = char:66
						this = char:65
						this = char:22
					}
				}
				NOT = { has_variable = had_mauryan_decline }
			}
			set_variable = had_mauryan_decline
			trigger_event = {
				id = dhe_buddhism.6
			}
		}
		if = {
			limit = {
				is_subject = yes
				is_subject_type = subject_mercenary_city_state
			}
			current_ruler = {
				add_martial = 2
			}
		}
		if = { #remove disloyal family mod if exists
			limit = {
				exists = root.current_ruler
				root.current_ruler = {
					has_character_modifier = disloyal_family_head_cmod
				}
			}
			root.current_ruler = {
				remove_triggered_character_modifier = disloyal_family_head_cmod
			}
		}
		if = {
			limit = {
				root.current_ruler = {
					has_variable = disloyal_family_head_var
				}
			}
			root.current_ruler = {
				remove_variable = disloyal_family_head_var
			}
		}
		if = {
			limit = {
				scope:former_ruler = {
					num_of_rivals >= 1
					any_rival = {
						is_ruler = yes
						NOT = {
							employer = root
						}
					}
					employer = {
						has_land = yes
					}
				}
			}
			scope:former_ruler = {
				every_rival = {
					limit = {
						is_ruler = yes
						NOT = {
							employer = root
						}
					}
					remove_rival = scope:former_ruler
				}
			}
		}
		if = {
			limit = {
				current_ruler = {
					has_variable = prominent_actor
					var:prominent_actor = 1
				}
				has_land = yes
			}
			current_ruler = {
				change_variable = {
					name = prominent_actor
					add = -1
				}
			}
		}
		if = {
			limit = {
				scope:former_ruler = {
					is_alive = yes
					has_variable = prominent_actor
					var:prominent_actor = 0
					employer = {
						has_land = yes
					}
				}
			}
			scope:former_ruler = {
				change_variable = {
					name = prominent_actor
					add = 1
				}
			}
		}
		if = {
			limit = {
				has_country_modifier = almost_divine_basileus
			}
			remove_country_modifier = almost_divine_basileus
		}
		if = {
			limit = {
				has_country_modifier = egypt_divine_basileus
			}
			remove_country_modifier = egypt_divine_basileus
		}
		clear_party_agenda_cooldown_var_effect = yes
		clear_befriending_var_effect = yes
		if = {
			limit = { has_country_modifier = dictatorial_extension }
			remove_country_modifier = dictatorial_extension
		}
		if = {
			limit = { has_variable = dictatorship_enabled }
			remove_variable = dictatorship_enabled
		}
		if = {
			limit = { has_variable = ach_dictator_appointed }
			remove_variable = dictatorship_enabled
		}
		if = {
			limit = {
				has_country_modifier = oaths_of_allegiance
			}
			remove_country_modifier = oaths_of_allegiance
		}
		if = {
			limit = {
				any_character = {
					has_character_modifier = elevated_pretender_charmod
				}
			}
			random_character = {
				limit = {
					has_character_modifier = elevated_pretender_charmod
				}
				remove_character_modifier = elevated_pretender_charmod
			}
		}
		if = {
			limit = {
				has_variable = ip_mon_36_flag
			}
			remove_variable = ip_mon_36_flag
		}
		if = {
			limit = { has_variable = ip_mon_38_flag }
			remove_variable = ip_mon_38_flag
		}
		if = {
			limit = { 
				scope:former_ruler = { has_variable = me_syr_current_tyrant_flag }
			}
			scope:former_ruler = { 
				remove_variable = me_syr_current_tyrant_flag
				save_scope_as = syracuse_old_tyrant
				employer = {
					trigger_event = {
						id = me_syracuse_1_democracy.3
						days = 1
					}
				}
			}
		}
		if = {
			limit = {
				is_monarchy = yes
				scope:former_ruler = { is_alive = no }
			}
			trigger_event = {
				id = gov_pol.9 #Loss of state loyalty
			}
		}
		if = {
			limit = { has_country_modifier = me_epi_aborted_early }
			remove_country_modifier = me_epi_aborted_early
		}
		if = {
			limit = {
				is_republic = yes
			}
			current_ruler = {
				add_charisma = 1
			}
		}
		if = {
			limit = {
				scope:former_ruler = char:37
				tag = PRY
			}
			trigger_event = diadochi_flavor.8 #Antigonus bad
			trigger_event = diadochi_flavor.9 #Antigonus good
		}
	}
	on_actions = {
		on_republic_ruler_change
		on_monarchy_ruler_change
		delay = { days = { 1 2 } }
	}
	events = {
		family_events.5 #Rise of new Family
		new_ruler.1
		ip_republic.36
		succession_crisis.5
		character_events.8
		character_events.15
		diadochi_flavor.6
		roman_flavor.5 # Consul Conspiracy - Successful Election
		roman_flavor.6 # Consul Conspiracy - Unsuccessful Election
		italian_flavor.9 # Sicily and the Mamertines
		italian_flavor.15 # Sicily and the Mamertines fallback
		ip_monarchy.53 # Consort regency
		roman_flavor.13 # Dictator in Power
		dhe_iberia.4 # Pharnavaz becomes King of Iberia
		country_rename.1 # SEL/MRY/PRY name change
		me_roman_inheritance.1 # Roman Inheritance
		me_kush.43 # A New Pharaoh
	}
	random_events = {
		100 = 0
		25 = character_events.30
		5 = roman_flavor.1 # Start of Consul Conspiracy Event
	}
}


on_monarchy_ruler_change = {
	trigger = {
		is_monarchy = yes
		NOT = { has_variable = regency_government }	
	}
	
	effect = {
		add_stability = -10
		calculate_succession_effect = yes
		trigger_event = {
			id = firstborn_traits.1
		}
	}
}
